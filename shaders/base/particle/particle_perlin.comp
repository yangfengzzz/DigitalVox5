// Fast computation of x modulo 289
vec3 mod289(vec3 x) {
    return x - floor(x * (1.0f / 289.0f)) * 289.0f;
}

vec4 mod289(vec4 x) {
    return x - floor(x * (1.0f / 289.0f)) * 289.0f;
}

// Compute indices for the PRNG
vec4 permute(vec4 x, int uPerlinNoisePermutationSeed) {
    return mod289(((x*34.0f)+1.0f)*x + uPerlinNoisePermutationSeed);
}

// Quintic interpolant
vec2 fade(vec2 u) {
    return u*u*u*(u*(u*6.0f - 15.0f) + 10.0f);

    // Original cubic interpolant (faster, but not 2nd order derivable)
    //return u*u*(3.0f - 2.0f*u);
}

vec3 fade(vec3 u) {
    return u*u*u*(u*(u*6.0f - 15.0f) + 10.0f);
}

float normalizeNoise(float n) {
    // return noise in [0, 1]
    return 0.5f*(2.44f*n + 1.0f);
}